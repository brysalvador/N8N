{
  "name": "Sub-Category 2",
  "nodes": [
    {
      "parameters": {
        "operation": "getAll",
        "simple": false,
        "filters": {
          "readStatus": "unread"
        },
        "options": {
          "downloadAttachments": true
        }
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        -528,
        -400
      ],
      "id": "4254e69a-21ac-46dc-bedb-93cf98c846e3",
      "name": "Get many messages",
      "webhookId": "4a5f8c02-1d7e-4603-bd6f-f37634203258",
      "credentials": {
        "gmailOAuth2": {
          "id": "mXEy10xeKtJy5fSX",
          "name": "Gmail"
        }
      }
    },
    {
      "parameters": {
        "inputSource": "passthrough"
      },
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1.1,
      "position": [
        -800,
        -400
      ],
      "id": "dedba91f-3196-4941-ab6a-e670fb05f86d",
      "name": "When Executed by Another Workflow"
    },
    {
      "parameters": {
        "operation": "pdf",
        "binaryPropertyName": "={{ $json.attachments }}",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        624,
        -416
      ],
      "id": "d704999f-8a0a-4f8d-a742-0a9e686f7a1e",
      "name": "Extract from File"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "8b9d80bb-25f2-4489-befc-2b472f8fb2db",
              "name": "attachments",
              "value": "={{ $('Get many messages').item.binary.keys() }}",
              "type": "array"
            },
            {
              "id": "4d954085-ee3c-4e57-92e4-575fb7553c69",
              "name": "message_id",
              "value": "={{ $json.id }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        32,
        -672
      ],
      "id": "cade57ff-771e-49b7-8b55-0a916ac2a695",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "fieldToSplitOut": "attachments",
        "include": "allOtherFields",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        224,
        -672
      ],
      "id": "d0eb120e-4f7c-40d2-b76d-702e734fc279",
      "name": "Split Out"
    },
    {
      "parameters": {
        "mode": "combine",
        "advanced": true,
        "mergeByFields": {
          "values": [
            {
              "field1": "message_id",
              "field2": "id"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        416,
        -416
      ],
      "id": "41b65a7e-32cb-42b5-9161-3f1fdb3f3990",
      "name": "Merge"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "3173f9b2-f3f5-42d8-8322-8fc41651bb67",
              "leftValue": "={{ $('Get many messages').item.binary?.keys() }}",
              "rightValue": "",
              "operator": {
                "type": "array",
                "operation": "exists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2.2,
      "position": [
        -192,
        -576
      ],
      "id": "ebba6329-066f-4a1f-83df-3308de3a2b03",
      "name": "Get All Attachments"
    },
    {
      "parameters": {
        "jsCode": "// Loop through all PDF items\nreturn items.map(item => {\n  const text = item.json.text;\n  const lines = text.split('\\n').map(line => line.trim()).filter(Boolean);\n\n  // --- Helper: Extract label from partial match like 'employment status'\n  function extractByIncludes(labelPart) {\n    const line = lines.find(l => l.toLowerCase().includes(labelPart.toLowerCase()));\n    if (!line) return 'Not Found';\n    const parts = line.split(' : ');\n    return parts.length > 1 ? parts[1].trim() : 'Not Found';\n  }\n\n  // --- Helper: extract directly by exact label\n  function extractAfterLabel(label) {\n    const pattern = new RegExp(label.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&') + '\\\\s*:\\\\s*(.*)', 'i');\n    const match = text.match(pattern);\n    return match ? match[1].trim() : 'Not Found';\n  }\n\n  // --- PERSONAL INFO ---\n  const nameLine = lines.find(line => line.includes('Last Name') && line.includes('First Name'));\n  let lastName = 'Not Found';\n  let givenName = 'Not Found';\n\n  if (nameLine) {\n    const match = nameLine.match(/Last Name\\s*:\\s*([A-Z\\s]+)\\s+First Name\\s*:\\s*([A-Z\\s]+)/i);\n    if (match) {\n      lastName = match[1].trim();\n      givenName = match[2].trim();\n    }\n  }\n\n  const contactMatch = text.match(/Contact Number\\s*:\\s*([+0-9]+)\\s+Email Address\\s*:\\s*([^\\s]+)/i);\n  const contactNumber = contactMatch ? contactMatch[1].trim() : 'Not Found';\n  const emailAddress = contactMatch ? contactMatch[2].trim() : 'Not Found';\n\n  // --- EMPLOYMENT INFO ---\n  let employerName = 'Not Found';\n  let jobTitle = 'Not Found';\n  let employerAddress = extractByIncludes('Company Complete Address');\n\n  const employmentLine = lines.find(l =>\n    l.includes('Employer / Company Name') && l.includes('Job Title / Current Position')\n  );\n\n  if (employmentLine) {\n    const employerMatch = employmentLine.match(/Employer \\/ Company Name\\s*:\\s*(.*?)\\s+Job Title/i);\n    const jobMatch = employmentLine.match(/Job Title \\/ Current Position\\s*:\\s*(.+)/i);\n    if (employerMatch) employerName = employerMatch[1].trim();\n    if (jobMatch) jobTitle = jobMatch[1].trim();\n  }\n\n  const employmentInformation = {\n    employerName,\n    jobTitle,\n    employerAddress\n  };\n\n  // --- FUNDING INFO ---\n  const bankAverageIndex = lines.findIndex(l => l.toLowerCase().includes('average daily balance'));\n  const bankAverageBalancefor6months = bankAverageIndex !== -1 ? lines[bankAverageIndex + 1] : 'Not Found';\n  const currentBankBalance = extractByIncludes('Current Bank Account Balance');\n\n  const fundingDetails = {\n    bankAverageBalancefor6months,\n    currentBankBalance\n  };\n\n  // --- TRAVEL HISTORY ---\n  const travelHistory = [];\n  const travelIndex = lines.findIndex(l => l.includes('TRAVEL HISTORY IN THE PAST 10 YEARS'));\n  if (travelIndex !== -1) {\n    for (let i = travelIndex + 2; i < lines.length; i += 2) {\n      const countryLine = lines[i];\n      const dateLine = lines[i + 1];\n      if (countryLine && dateLine && /^\\d+\\./.test(countryLine)) {\n        const country = countryLine.replace(/^\\d+\\.\\s*/, '').trim();\n        const dates = dateLine.trim();\n        if (country && dates) {\n          travelHistory.push({ country, dates });\n        }\n      } else {\n        break;\n      }\n    }\n  }\n\n  // --- Output per PDF ---\n  return {\n    json: {\n      givenName,\n      lastName,\n      contactNumber,\n      emailAddress,\n      employmentInformation,\n      fundingDetails,\n      travelHistory\n    }\n  };\n});"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        832,
        -416
      ],
      "id": "b7b53fa1-3662-44fe-91cc-e63930465713",
      "name": "Code1"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=You are Alexa, a trusted and experienced visa consultant from SMB Travel and Tours. You specialize in assisting clients with tourist visa applications for various countries. Your role is to review and assess each applicant's profile based only on the structured data provided.\n\nThe data includes the applicant’s personal information, employment details, financial status, and travel history. Your goal is to provide a concise, professional, and easy-to-read assessment that helps the applicant prepare a stronger visa application.\n\nOutput Instructions:\n1. Respond with HTML only — no markdown, no code blocks, no triple backticks.\n2. The HTML must be complete, with <html>, <head>, and <body> tags, ready to use as an email body.\n3. Use clear headings (<h1>, <h2>) and paragraphs (<p>) for readability.\n4. Use bullet points for the assessment and recommendations.\n5. The tone should be:\n- Honest, supportive, and conversational — like speaking directly to the applicant\n- Professional but simple — avoid jargon or robotic wording\n- Realistic — never guarantee outcomes or approval\n- Encouraging — highlight strengths while politely noting concerns\n6. Do not invent or assume information. Only use what is explicitly provided. If data is missing, write “Not specified.”\n7. Always include a polite reminder that this assessment is advisory and does not guarantee visa approval.\n\nNow assess the applicant using the data below:\n\nApplicant Name: {{ $json.givenName }} {{ $json.lastName }}\nEmail: {{ $json.emailAddress }}\nEmployment: {{ $json.employmentInformation.jobTitle || \"Not specified\" }} at {{ $json.employmentInformation.employerName || \"Not specified\" }}\nEmployment Start Date: {{ $json.employmentInformation.employmentStartDate || \"Not specified\" }}\nMonthly Salary: {{ $json.employmentInformation.monthlySalary || \"Not specified\" }}\nBank Average Balance (Last 6 Months): ₱{{ $json.fundingDetails.bankAverageBalancefor6months || \"Not specified\" }}\nCurrent Bank Balance: ₱{{ $json.fundingDetails.currentBankBalance || \"Not specified\" }}\nPrevious Travels:\n{{ $json.travelHistory.map(t => \"- \" + t.country + \" (\" + t.dates + \")\").join(\"<br>\") || \"Not specified\" }}\n\nAssessment Summary:\n1. Provide a concise evaluation of the applicant’s financial standing, employment ties, family/social connections, and travel history.\n2. Highlight the applicant’s strengths (e.g., stable job, sufficient savings, past international travel).\n3. Identify areas of concern (e.g., limited funds, weak travel record, unclear employment status).\n4. Keep the summary short, professional, and in bullet points only.\n\nImportant Note:\n- This assessment is based only on the information provided with the application. It is intended to give a clear picture of the applicant’s profile and areas that may raise concern. It does not guarantee visa approval, as the final decision rests with the embassy.\n\nNext Step for Applicant:\n1. If you wish to proceed with the visa application, kindly inform us so we can provide your billing satement.\n2. If you have other concerns, feel free to reach out anytime.",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.1,
      "position": [
        1040,
        -416
      ],
      "id": "4365b4ea-7a14-4ffd-ab66-a162093fa566",
      "name": "AI Agent1"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4.1-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        928,
        -224
      ],
      "id": "9bc0c059-40ae-45ab-9d8c-30172c12466c",
      "name": "OpenAI Chat Model1",
      "credentials": {
        "openAiApi": {
          "id": "QuFQGsPklRzSZqzF",
          "name": "OpenAI SMB"
        }
      }
    },
    {
      "parameters": {
        "resource": "thread",
        "operation": "reply",
        "threadId": "={{ $('Get many messages').item.json.threadid }}",
        "messageId": "={{ $('Get many messages').item.json.id }}",
        "emailType": "html",
        "message": "={{ $json.output }}",
        "options": {}
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        1392,
        -416
      ],
      "id": "246b1e99-126a-4298-adbb-838487469fd9",
      "name": "Reply to a message1",
      "webhookId": "67124628-336d-4684-807a-d2c9c2d1520c",
      "credentials": {
        "gmailOAuth2": {
          "id": "mXEy10xeKtJy5fSX",
          "name": "Gmail"
        }
      }
    },
    {
      "parameters": {
        "operation": "markAsRead",
        "messageId": "={{ $('Get many messages').item.json.id }}"
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        1616,
        -416
      ],
      "id": "1a1f0152-d7cb-4f29-973f-1edf09968a66",
      "name": "Mark a message as read",
      "webhookId": "d0648989-0b00-40ee-9cdc-ee92327d3b1e",
      "credentials": {
        "gmailOAuth2": {
          "id": "mXEy10xeKtJy5fSX",
          "name": "Gmail"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "Get many messages": {
      "main": [
        [
          {
            "node": "Get All Attachments",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "When Executed by Another Workflow": {
      "main": [
        [
          {
            "node": "Get many messages",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from File": {
      "main": [
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Split Out",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Extract from File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get All Attachments": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code1": {
      "main": [
        [
          {
            "node": "AI Agent1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent1": {
      "main": [
        [
          {
            "node": "Reply to a message1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Reply to a message1": {
      "main": [
        [
          {
            "node": "Mark a message as read",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "f711f53d-fdd7-4d34-a556-01825a299b43",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "ec7e42c4f361972a8c80ab3ebd270266122f96d9ebf1a7569610656255d73898"
  },
  "id": "Q7vXh8tWmaFOOwIE",
  "tags": []
}