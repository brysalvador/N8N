{
  "name": "Visa Assessment - Gmail",
  "nodes": [
    {
      "parameters": {
        "pollTimes": {
          "item": [
            {
              "mode": "everyMinute"
            }
          ]
        },
        "simple": false,
        "filters": {
          "readStatus": "unread"
        },
        "options": {
          "dataPropertyAttachmentsPrefixName": "",
          "downloadAttachments": true
        }
      },
      "type": "n8n-nodes-base.gmailTrigger",
      "typeVersion": 1.2,
      "position": [
        -832,
        256
      ],
      "id": "080868b7-96f9-4d4a-b94b-4c18aec8d9c5",
      "name": "Gmail Trigger",
      "credentials": {
        "gmailOAuth2": {
          "id": "2d1QkwJS8DV1yeGk",
          "name": "Gmail account"
        }
      }
    },
    {
      "parameters": {
        "operation": "pdf",
        "binaryPropertyName": "={{ $json.attachments }}",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        592,
        240
      ],
      "id": "ba5b76e5-d910-4221-8277-87e52ba82815",
      "name": "Extract from File"
    },
    {
      "parameters": {
        "jsCode": "// Loop through all PDF items\nreturn items.map(item => {\n  const text = item.json.text;\n  const lines = text.split('\\n').map(line => line.trim()).filter(Boolean);\n\n  // --- Helper: Extract label from partial match like 'employment status'\n  function extractByIncludes(labelPart) {\n    const line = lines.find(l => l.toLowerCase().includes(labelPart.toLowerCase()));\n    if (!line) return 'Not Found';\n    const parts = line.split(' : ');\n    return parts.length > 1 ? parts[1].trim() : 'Not Found';\n  }\n\n  // --- Helper: extract directly by exact label\n  function extractAfterLabel(label) {\n    const pattern = new RegExp(label.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&') + '\\\\s*:\\\\s*(.*)', 'i');\n    const match = text.match(pattern);\n    return match ? match[1].trim() : 'Not Found';\n  }\n\n  // --- PERSONAL INFO ---\n  const nameLine = lines.find(line => line.includes('Last Name') && line.includes('First Name'));\n  let lastName = 'Not Found';\n  let givenName = 'Not Found';\n\n  if (nameLine) {\n    const match = nameLine.match(/Last Name\\s*:\\s*([A-Z\\s]+)\\s+First Name\\s*:\\s*([A-Z\\s]+)/i);\n    if (match) {\n      lastName = match[1].trim();\n      givenName = match[2].trim();\n    }\n  }\n\n  const contactMatch = text.match(/Contact Number\\s*:\\s*([+0-9]+)\\s+Email Address\\s*:\\s*([^\\s]+)/i);\n  const contactNumber = contactMatch ? contactMatch[1].trim() : 'Not Found';\n  const emailAddress = contactMatch ? contactMatch[2].trim() : 'Not Found';\n\n  // --- EMPLOYMENT INFO ---\n  let employerName = 'Not Found';\n  let jobTitle = 'Not Found';\n  let employerAddress = extractByIncludes('Company Complete Address');\n\n  const employmentLine = lines.find(l =>\n    l.includes('Employer / Company Name') && l.includes('Job Title / Current Position')\n  );\n\n  if (employmentLine) {\n    const employerMatch = employmentLine.match(/Employer \\/ Company Name\\s*:\\s*(.*?)\\s+Job Title/i);\n    const jobMatch = employmentLine.match(/Job Title \\/ Current Position\\s*:\\s*(.+)/i);\n    if (employerMatch) employerName = employerMatch[1].trim();\n    if (jobMatch) jobTitle = jobMatch[1].trim();\n  }\n\n  const employmentInformation = {\n    employerName,\n    jobTitle,\n    employerAddress\n  };\n\n  // --- FUNDING INFO ---\n  const bankAverageIndex = lines.findIndex(l => l.toLowerCase().includes('average daily balance'));\n  const bankAverageBalancefor6months = bankAverageIndex !== -1 ? lines[bankAverageIndex + 1] : 'Not Found';\n  const currentBankBalance = extractByIncludes('Current Bank Account Balance');\n\n  const fundingDetails = {\n    bankAverageBalancefor6months,\n    currentBankBalance\n  };\n\n  // --- TRAVEL HISTORY ---\n  const travelHistory = [];\n  const travelIndex = lines.findIndex(l => l.includes('TRAVEL HISTORY IN THE PAST 10 YEARS'));\n  if (travelIndex !== -1) {\n    for (let i = travelIndex + 2; i < lines.length; i += 2) {\n      const countryLine = lines[i];\n      const dateLine = lines[i + 1];\n      if (countryLine && dateLine && /^\\d+\\./.test(countryLine)) {\n        const country = countryLine.replace(/^\\d+\\.\\s*/, '').trim();\n        const dates = dateLine.trim();\n        if (country && dates) {\n          travelHistory.push({ country, dates });\n        }\n      } else {\n        break;\n      }\n    }\n  }\n\n  // --- Output per PDF ---\n  return {\n    json: {\n      givenName,\n      lastName,\n      contactNumber,\n      emailAddress,\n      employmentInformation,\n      fundingDetails,\n      travelHistory\n    }\n  };\n});"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        816,
        240
      ],
      "id": "2c0a9e1b-c247-4a3a-a29e-cb58688ac235",
      "name": "Code"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=You are Alexa, a trusted and experienced visa consultant from SMB Travel and Tours. You specialize in assisting clients with tourist visa applications for various countries. Your role is to review and assess each applicant's profile based on the structured data provided.\n\nThe data includes the applicant’s personal information, employment details, financial status, and previous travel history. Your goal is to provide a concise and comprehensive assessment to guide the applicant in preparing a stronger visa application.\n\n**Output Instructions:**\n- Respond with HTML only — no markdown, no code blocks, no triple backticks.\n- The HTML should be complete with <html> and <body> tags, ready to send as an email body.\n- Use clear headings (<h1>, <h2>) and paragraphs (<p>) for readability.\n- Use a tone that is:\n  - Honest, supportive, and conversational — like you're speaking directly to the applicant\n  - Professional but easy to understand (avoid robotic or overly technical language)\n  - Realistic — do not guarantee approval or outcomes\n  - Encouraging, even when raising concerns\n- Include a polite reminder that the assessment is advisory and does **not guarantee visa approval**.\n\n---\n\nNow assess the applicant based on the following data:\n\n**Applicant Name:** {{ $json.givenName }} {{ $json.lastName }}  \n**Email:** {{ $json.emailAddress }}  \n**Employment:** {{ $json.employmentInformation.jobTitle || \"Not specified\" }} at {{ $json.employmentInformation.employerName || \"Not specified\" }}  \n**Employment Start Date:** {{ $json.employmentInformation.employmentStartDate || \"Not specified\" }}  \n**Monthly Salary:** {{ $json.employmentInformation.monthlySalary || \"Not specified\" }}  \n**Bank Average Balance (Last 6 Months):** ₱{{ $json.fundingDetails.bankAverageBalancefor6months || \"Not specified\" }}  \n**Current Bank Balance:** ₱{{ $json.fundingDetails.currentBankBalance || \"Not specified\" }}  \n**Previous Travels:**  \n{{ $json.travelHistory.map(t => \"- \" + t.country + \" (\" + t.dates + \")\").join(\"\\n\") || \"Not specified\" }}\n\n---\n\n**Assessment Summary:**  \n<Provide your honest and concise evaluation of the applicant’s financial standing, employment ties, and travel history. Mention strengths and any areas that may raise concern.>\n\n**Recommendation:**  \n<Give professional advice to improve their application, such as submitting supporting documents, explaining inconsistencies, or demonstrating stronger ties to the country. If the profile looks solid, kindly affirm it.>\n\n**Important Note:**  \nThis assessment is based on the information you’ve provided and is intended to guide you in preparing your visa application. It does **not guarantee visa approval**, as the final decision rests with the embassy.",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.1,
      "position": [
        1024,
        240
      ],
      "id": "dd1235f5-89be-4fe3-ae48-326e88c326eb",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4.1-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        912,
        432
      ],
      "id": "f099fd49-fa97-45df-aa55-18a2050969d6",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "SEqvOgziyma2Xhu2",
          "name": "n8n free OpenAI API credits"
        }
      }
    },
    {
      "parameters": {
        "resource": "thread",
        "operation": "reply",
        "threadId": "={{ $('Get many messages').item.json.threadId }}",
        "messageId": "={{ $('Get many messages').item.json.id }}",
        "emailType": "html",
        "message": "={{ $json.output }}",
        "options": {}
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        1376,
        240
      ],
      "id": "ef3a99fa-4879-4abb-9019-b2183d8bc461",
      "name": "Reply to a message",
      "webhookId": "67124628-336d-4684-807a-d2c9c2d1520c",
      "credentials": {
        "gmailOAuth2": {
          "id": "2d1QkwJS8DV1yeGk",
          "name": "Gmail account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "59d26c3f-d54c-4342-a69f-7ed48655de37",
              "leftValue": "={{ $('Gmail Trigger').item.binary }}",
              "rightValue": "",
              "operator": {
                "type": "object",
                "operation": "exists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2.2,
      "position": [
        -624,
        256
      ],
      "id": "b9c8ae31-7557-4318-ae4b-d3efd54a17e9",
      "name": "Filter"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "8b9d80bb-25f2-4489-befc-2b472f8fb2db",
              "name": "attachments",
              "value": "={{ $('Get many messages').item.binary.keys() }}",
              "type": "array"
            },
            {
              "id": "4d954085-ee3c-4e57-92e4-575fb7553c69",
              "name": "message_id",
              "value": "={{ $json.id }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        0,
        0
      ],
      "id": "33b8ccbd-cc2f-48c6-9af1-ae60081d7212",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "fieldToSplitOut": "attachments",
        "include": "allOtherFields",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        192,
        0
      ],
      "id": "b584fc94-4303-4f74-aa7f-d5b9edcd8d22",
      "name": "Split Out"
    },
    {
      "parameters": {
        "mode": "combine",
        "advanced": true,
        "mergeByFields": {
          "values": [
            {
              "field1": "message_id",
              "field2": "id"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        384,
        240
      ],
      "id": "104e74f6-b29d-4e16-99bc-1f2f2d73f756",
      "name": "Merge"
    },
    {
      "parameters": {
        "operation": "getAll",
        "simple": false,
        "filters": {
          "readStatus": "unread"
        },
        "options": {
          "downloadAttachments": true
        }
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        -416,
        256
      ],
      "id": "7dced713-4c77-48e6-8970-0b6875d14263",
      "name": "Get many messages",
      "webhookId": "4a5f8c02-1d7e-4603-bd6f-f37634203258",
      "credentials": {
        "gmailOAuth2": {
          "id": "2d1QkwJS8DV1yeGk",
          "name": "Gmail account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "3173f9b2-f3f5-42d8-8322-8fc41651bb67",
              "leftValue": "={{ $('Get many messages').item.binary?.keys() }}",
              "rightValue": "",
              "operator": {
                "type": "array",
                "operation": "exists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2.2,
      "position": [
        -224,
        80
      ],
      "id": "ae2d79cf-c5ec-4c18-a7da-a4dd903c8296",
      "name": "Get All Attachments"
    }
  ],
  "pinData": {},
  "connections": {
    "Gmail Trigger": {
      "main": [
        [
          {
            "node": "Filter",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from File": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Reply to a message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter": {
      "main": [
        [
          {
            "node": "Get many messages",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Split Out",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Extract from File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get many messages": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          },
          {
            "node": "Get All Attachments",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get All Attachments": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "6a9d8879-0e61-4ff3-a74a-45a699577676",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "ec7e42c4f361972a8c80ab3ebd270266122f96d9ebf1a7569610656255d73898"
  },
  "id": "1TH7lo3KqhStckC2",
  "tags": []
}